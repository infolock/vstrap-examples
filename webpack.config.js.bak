const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const webpack = require('webpack');
const path = require('path');

const dist = path.join(__dirname, 'dist', 'frontend');
const src = path.join(__dirname, 'src', 'main', 'frontend');

const WebpackConfig = {
	entry: {
		app: './public/index.js',
		[process.env.npm_package_name]: ['./public/index.js'],
	},
	output: {
		path:path.resolve(__dirname, 'dist'),
		filename: 'app.bundle.js'
	},
	// devtool: 'inline-source-map',
	// Reload On File Change
	watch: true,
	// Development Tools (Map Errors To Source File)
	devtool: 'source-map',
	mode: 'development',
	devServer: {
		contentBase: './dist',
		port: 3000,
		host: 'localhost',
		hot: true
	},
	resolve: {
		alias: {
			'@app-components': path.resolve(__dirname, 'public/components/'),
			'@app-styles': path.resolve(__dirname, 'public/styles/')
		}
	},
	module: {
		rules: [
			{
				test: /\.css$/,
				use: ['style-loader', 'css-loader']
			},
			{
				test: /\.js$/,
				exclude: /node_modules/,
				use: {
					loader: 'babel-loader',
					options: {
						presets: [
							"@babel/env"
						],
						plugins: [
							"@babel/plugin-proposal-class-properties",
							"@babel/plugin-transform-object-assign",
							"@babel/plugin-transform-runtime"
						]
					}
				}
			},
			{
				test: /\.(eot|svg|ttf|woff|woff2)$/,
				use: [{
					loader: 'file-loader',
					options: {
						name: '[name].[ext]',
						outputPath: 'fonts/'
					}
				}]
			}
		]
	},
	plugins: [
		new CleanWebpackPlugin(),
		new HtmlWebpackPlugin({
			title: 'vStrap Example'
		}),
		new webpack.HotModuleReplacementPlugin()
	]
};

module.exports = WebpackConfig;
